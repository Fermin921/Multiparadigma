Pasos para la creacion de django 

1. Crear entorno virtual:
python -m venv .venv

1.1 Seleccionar interpreter:
ctrl + shift + p

1.2 Seleccionar version de python recomendada

1.3 Despues abrir una nueva terminal de cmd

2. Instalar DJango:
python -m pip install django

2.1 Instalar Psycopg2
python -m pip install psycopg2

3. Crear un directorio de django:
django-admin startproject nombredelproyecto

4. Entrar al directorio creado:
cd nombredelproyecto

5. Crear la aplicacion dentro del directorio:
python manage.py startapp webapp

6.Correr el servidor:
python manage.py runserver

Viernes:

1. Crear la conexion a la base de datos
En dentro de la carpeta que creamos, buscamos el archivo config.py

1.1 Buscamos el apartado DATABASES

1.2 Agregamos los datos de la conexion a la base de datos:
 "default": {
        # "ENGINE": "django.db.backends.sqlite3",
        # "NAME": BASE_DIR / "db.sqlite3",
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "postgres",
        "USER": "postgres",
        "PASSWORD": "19100209",
        "HOST": "localhost",
        "PORT": "5432",
    }

2. importar las tablas por defecto de jango usando la migracion
    python manage.py migrate

3. Verificar que se hayan creado las tablas en la base datos o bien en pg admin 

//Aqui nos quedamos

3.1 Dentro de la carpeta del proyecto

4. Crear un super usuario:
python manage.py createsuperuser 
4.1 Pedira un username 
4.2 un email 
4.3 Contraseña 
4.4 confimarcion de la contraseña

5. Ejecutar el servidor con python manage.py runserver
5.1 Verificamos que si podamos iniciar sesion ejecutando el servidor y en la bara de direcciones agregamos "/admin"
5.2 Iniciamos sesion con lo creado

7. Despues creamos una nueva aplicacion:
python manage.py startapp persona 

8. En la carpeta persona/models.py agregamos los atributos:
class Domicilio(models.Model):
    calle = models.CharField(max_length=255)
    no_calle = models.IntegerField()
    pais = models.CharField(max_length=255)

8.1 Recordar que hay que crear la tabla que va ser referenciada primero 

9. Despues vamos a persona/admin: 
from persona.models import Domicilio

	# Register your models here.
	admin.site.register(Domicilio)

10. Despues creamos la migracion con el siguiente comando: 
    python manage.py showmigrations

10.1 En caso de que no reconozca los modelos

Vamos al archivo settings.py y en el apartado "INSTALLED_APPS" 
Agregamos el nombre de los modelos

10.2 Pero si se reconocen los modelos, ahora creamos una solicitud de migracion:
con.
python manage.py makemigrations

11. Realizamos la migracion: 
    python manage.py migrate
    
12. ejecutamos el servidor:
python manage.py runserver

//Borrar
Lunes:
//
1.Creamos el metodo str para tabla domicilio
{self.pai    def __str__(self) -> str:
        return f"Domicilio {self.id}, Calle {self.calle}, no. {self.no_calle}, pais s}"


2. Creamos un nueva clase dentro del archivo models
class Persona(models.Model):
    nombre = models.CharField(max_length=255)
    apellido = models.CharField(max_length=255)
    email = models.CharField(max_length=255)
    domicilio = models.ForeignKey(Domicilio, on_delete=models.SET_NULL, null=True)

    def __str__(self) -> str:
        return f"Persona {self.id}, Nombre: {self.nombre}, Apellido: {self.apellido}, Email: {self.email}, Domicilio: {self.domicilio}"

3. Despues creamos la migracion para poder cargarla en la pagina admin de django 
python manage.py makemigration 

4. Despues ya solo migramos:
python manage.py migrate 

5. Para poder visualizarlo, tenenmos que ir al archivo settings y agregar en "INSTALLED APPS" el modelo "persona"
//
13. Dentro del webapp o aplicacion creamos una nueva carpeta "templates", donde iran guardas los documentos html

14. En este caso creamos un archivo que servira como el principal, para poder redireccionar a las diferentes vistas

 Agregando un href que llamaremos ListadoPersonas 
    <a href="ListadoPersonas">Listado de las personas</a>

15. Ahora, dentro de la carpeta personas, creamos una nueva carpeta llamada "Templates" y creamos un nuevo documento html llamado indexpersona 

16. Dentro de este archivo creamos una tabla donde se guardara o mostrara los datos consultados:

<h1>Lista de personas</h1>

    <table>
        <thead>
            <tr>
                <td>ID</td>
                <td>Nombre</td>
                <td>Email</td>
            </tr>
            <tbody>
                <!--El bloque de abajo es para agregar codigo de python, algo parecido como con php -->
                {% for persona in personas %} 
                    <tr>
                        <td>{{persona.id}}</td>
                        <td>{{persona.nombre}} {{persona.apellido}}</td>
                        <td>{{persona.emai}}</td>
                    </tr>
                {%endfor%}
            </tbody>
        </thead>
    </table>

17. Ya creado los documentos, tenemos que referenciarlos para poder visualizarlos, ahora vamos al archivo 'urls.py' y agregamos el archivo 
creado: 
from webapp.views import index, indexPersona

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", index),
    path("ListadoPersonas", indexPersona),
]

18. Antes de ejecutar el servidor, para el renderizado de la pagina agreamos lo siguiente: 
from persona.models import Persona
def indexPersona(request):
    personas = Persona.objects.order_by("id")

    return render(request, "IndexPersona.html", {"personas": personas})

Martes:
En caso de que se nos solicite un email, implementamos lo siguiente:

1. En la carpeta persona Se crea el archivo forms domde agregamos el siguiente formulario que se creara automatico:
from django.forms import ModelForm, EmailInput
from persona.models import Persona


class PersonaForm(ModelForm):
    class Meta:
        model = Persona
        fields = "__all__"
        widgets = {
            "email": EmailInput(
                attrs={
                    "type": "email",
                    "class": "form-control",
                    "style": "max-width:100 px",
                    "placeholder": "Correo",
                }
            )
        }

2. Para poder visualizarlo lo agregamos a la carpeta view del proyecto:
from django.shortcuts import render, redirect, get_object_or_404
from persona.models import Persona
from persona.forms import PersonaForm


# Vistas
En el archivo views de la app Personas


Antes hay que crear un archivo html llamado Agregar
Que es donde cargara el archivo generado

# Agregar una nueva persona
def nuevaPersona(request):
    if request.method == "POST":
        formapersona = PersonaForm(request.POST)
        if formapersona.is_valid():
            formapersona.save()
            return redirect("ListadoPersonas")
    else:
        formapersona = PersonaForm()
    return render(request, "Agregar.html", {"formapersona": formapersona})

3. Ya creado y referenciado, ahora vamos al archivo de urls para agregar la direccion:

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", index),
    path("ListadoPersonas", indexPersona, name="ListadoPersonas"),
    path("nuevapersona", nuevaPersona),
]

4. Ademas en el archivo principal colocaremos un href para usar la funcionalidad de cambiar de pagina:
    <a href="nuevapersona">Agregar</a>

5. Ya tenemos para agregar y consultar personas en nuestro proyecto, ahora crearemos 2 archivos mas llamados eliminar y editar
que serian parecidos al de agregar 
EditarPersona.html:
{%extends "layout.html"%}
{%block body%}
<div>
    <form method="post">
        <h1>Editar Persona</h1>
    <table>
        <div>
            {{formapersona}}
        </div>
    </table>
    <div >
        <input type="submit" value="submit">
    </div>
    {% csrf_token %}
    </form>
</div>
{%endblock%}

El delete no lleva forma solo se usara un metodo:

7. Ahora, en index persona, agregar unas celdas vacias para agregar los diferentes  botones de accion para el crud:

    {%extends "layout.html"%}
    {%block body%}
<div>
    <h1>Lista de personas</h1>
    <a href="nuevapersona">Agregar</a>
    <table border="1">
        <thead>
            <tr>
                <td>ID</td>
                <td>Nombre</td>
                <td>Email</td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tbody>
                <!--El bloque de abajo es para agregar codigo de python, algo parecido como con php -->
                {% for persona in personas %} 
                    <tr>
                        <td>{{persona.id}}</td>
                        <td>{{persona.nombre}} {{persona.apellido}}</td>
                        <td>{{persona.email}}</td>
                        <td><a href="editarPersona/{{persona.id}}">Editar</a></td>
                        <td><a href="detallePersona/{{persona.id}}">Detalle</a></td>
                        <td><a href="EliminarPersona/{{persona.id}}">Eliminar</a></td>
                    </tr>
                {%endfor%}
            </tbody>
        </thead>
    </table>
</div>
{%endblock%}

Quedaria de la forma anterior el index persona:

8. para la funcionalidad de los botones, nos vamos al archivo views para agregar las funciones correspondientes de cada accion:

La manera final del view.py quedaria de la siguiente manera:
from django.shortcuts import render, redirect, get_object_or_404
from persona.models import Persona
from persona.forms import PersonaForm


# Vistas
# Agregar una nueva persona
def nuevaPersona(request):
    if request.method == "POST":
        formapersona = PersonaForm(request.POST)
        if formapersona.is_valid():
            formapersona.save()
            return redirect("ListadoPersonas")
    else:
        formapersona = PersonaForm()
    return render(request, "Agregar.html", {"formapersona": formapersona})


# Metodo para editar persona
def editarPersona(request, id):
    persona = get_object_or_404(Persona, pk=id)
    if request.method == "POST":
        formaPersona = PersonaForm(request.POST, instance=persona)
        if formaPersona.is_valid():
            formaPersona.save()
            return redirect("ListadoPersonas")
    else:
        formaPersona = PersonaForm(instance=persona)
    return render(request, "editarPersona.html", {"formapersona": formaPersona})


# EliminarPersona
def EliminarPersona(request, id):
    persona = get_object_or_404(Persona, pk=id)
    if persona:
        persona.delete()
    return redirect("ListadoPersonas")


# ConsultarPersonas
def DetallePersona(request, id):
    persona = get_object_or_404(Persona, pk=id)
    return render(request, "detallePersona.html", {"persona": persona})

9. Ya creados los metodos, tenemos que dirigirnos al archivo urls.py para hacer las referencias para mandarlos llamar:
El urls final quedaria de la siguiente manera :
from django.contrib import admin
from django.urls import path
from webapp.views import index, indexPersona
from persona.views import *

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", index),
    path("ListadoPersonas", indexPersona, name="ListadoPersonas"),
    path("nuevapersona", nuevaPersona),
    path("detallePersona/<int:id>", DetallePersona),
    path("editarPersona/<int:id>", editarPersona),
    path("EliminarPersona/<int:id>", EliminarPersona),
]


Crearemos un nuevo html que sera donde se guardaran los estilos automaticos de las diferentes pantallas quedaria de la siguiente manera:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <title>Layout</title>
</head>
<body>
    {%load static %}
    <img src="{% static 'Portada.png'%}" height="50px" width="50px">
    {%block body %}

    {%endblock%}
</body>
</html>

Esto dependiendo de cada quien se agregara los estilos o imagenes que siempre van a aparecer 

En caso de querer utilizar las imagenes o algun otro recurso fijo, se crea una carpeta llamada "static" que ahi se guardaran estos archivos,
por ejemplo ahi cargamos una imagen que sera mostrada en cada una de las paginas, pero para eso tenemos que modificar los diferentes html
agregando 2 etiquetas, al final quedarian de la siguiente manera los htmls:

1. Agregar.html: 
{%extends "layout.html"%}
{%block body%}
<div>
    <form method="post">
        <h1>Agregar Persona</h1>
    <table>
        <div>
            {{formapersona}}
        </div>
    </table>
    <div >
        <input type="submit" value="submit">
    </div>
    {% csrf_token %}
    </form>
</div>
{%endblock%}

2.detallePersona.html:
{%extends "layout.html"%}
{%block body%}
<div>
    <h1>
        {{persona.id}}
        {{persona.nombre}}
        {{persona.apellido}}
        {{persona.email}}
    </h1>
    
    <a href="{% url 'ListadoPersonas' %}"> Regresar </a>
</div>
{%endblock%}


3. indexPersona.html:

    {%extends "layout.html"%}
    {%block body%}
<div>
    <h1>Lista de personas</h1>
    <a href="nuevapersona">Agregar</a>
    <table border="1">
        <thead>
            <tr>
                <td>ID</td>
                <td>Nombre</td>
                <td>Email</td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tbody>
                <!--El bloque de abajo es para agregar codigo de python, algo parecido como con php -->
                {% for persona in personas %} 
                    <tr>
                        <td>{{persona.id}}</td>
                        <td>{{persona.nombre}} {{persona.apellido}}</td>
                        <td>{{persona.email}}</td>
                        <td><a href="editarPersona/{{persona.id}}">Editar</a></td>
                        <td><a href="detallePersona/{{persona.id}}">Detalle</a></td>
                        <td><a href="EliminarPersona/{{persona.id}}">Eliminar</a></td>
                    </tr>
                {%endfor%}
            </tbody>
        </thead>
    </table>
</div>
{%endblock%}

4. editarPersona.html:
{%extends "layout.html"%}
{%block body%}
<div>
    <form method="post">
        <h1>Editar Persona</h1>
    <table>
        <div>
            {{formapersona}}
        </div>
    </table>
    <div >
        <input type="submit" value="submit">
    </div>
    {% csrf_token %}
    </form>
</div>
{%endblock%}

Con esto quedaria finalizado el proyecto, ya solo quedaria hacer las modificaciones dependiendo de las necesidades de cada persona
o lo que requiera el proyecto en general, para los estilos es en "layout.html"
